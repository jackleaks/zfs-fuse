Import('env')

objects = []

objects.append('cmd_listener.c')
objects.append('ptrace.c')
objects.append('util.c')
objects.append('zfs_acl.c')
objects.append('zfs_dir.c')
objects.append('zfs_ioctl.c')
objects.append('zfs_log.c')
objects.append('zfs_replay.c')
objects.append('zfs_rlock.c')
objects.append('zfs_vfsops.c')
objects.append('zfs_vnops.c')
objects.append('zfsfuse_socket.c')
objects.append('zvol.c')

cpppath = Split('#lib/libavl/include #lib/libnvpair/include #lib/libumem/include #lib/libzfscommon/include #lib/libsolkerncompat/include')
ccflags = Split('-D_KERNEL')
libs = Split('rt pthread fuse dl z aio')

if (env['SLASHLIB']) == "1":
	print "slashlib enabled %s\n" % (env['SLASHLIB'])
	objects.append('zfs_operations_slash.c')
	ccflags.append('-I../../../psc_fsutil_libs/include')
	ccflags.append('-I../../../slash_nara/include')
	ccflags.append('-I../../../slash_nara')
	env.StaticLibrary('libzfs-fuse', objects, CPPPATH = env['CPPPATH'] + cpppath, LIBS = libs, CCFLAGS = env['CCFLAGS'] + ccflags)
else:
	print "slashlib disabled %s\n" % (env['SLASHLIB'])
	objects.append('fuse_listener.c')
	objects.append('main.c')
	objects.append('zfs_operations.c')
	objects.append('#lib/libzpool/libzpool-kernel.a')
	objects.append('#lib/libavl/libavl.a')
	objects.append('#lib/libnvpair/libnvpair-kernel.a')
	objects.append('#lib/libsolkerncompat/libsolkerncompat.a')
	objects.append('#lib/libumem/libumem.a')
	objects.append('#lib/libzfscommon/libzfscommon-kernel.a')
	env.Program('zfs-fuse', objects, CPPPATH = env['CPPPATH'] + cpppath, LIBS = libs, CCFLAGS = env['CCFLAGS'] + ccflags)
